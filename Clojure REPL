REPL Instructions

Code can be entered at the bottom and executed by pressing shift+enter.

Try it now by typing (+ 1 1) in the bottom section and pressing shift+enter.

Working in another Clojure file and sending forms to the REPL is the most efficient way to work. Use the following key bindings to send code to the REPL. See the settings for more keybindings.

ctrl-alt-, then b
Execute block. Finds the block of Clojure code your cursor is in and executes that.

ctrl-alt-, s
Executes the selection. Sends the selected text to the REPL.

You can disable this help text in the settings.
Starting remote REPL connection on localhost:35607
Refreshing code...
No user namespace defined. Defaulting to clojure.tools.namespace.repl/refresh.

:reloading (game-of-life.core game-of-life.core-test)
Refresh complete
(defn dead>alive [neighbors'-indices world]
  (let [neighbors (indices-in-bounds neighbors'-indices world)]
    (if (> (apply + neighbors)
     (/ (count neighbors) 2)) 1 0)))
game-of-life.core=>
#'game-of-life.core/dead>alive
(dead>alive (neighbors'-indices 3 7) [0 0 0 0 0 0 0 0 0])
game-of-life.core=>
0
(dead>alive (neighbors'-indices 3 7) [0 0 0 0 0 0 0 0 1])
game-of-life.core=>
0
(dead>alive (neighbors'-indices 3 7) [0 0 0 0 0 0 1 1 1])
game-of-life.core=>
0
(dead>alive (neighbors'-indices 3 7) [1 1 0 0 0 0 1 1 1])
game-of-life.core=>
1
(dead>alive (neighbors'-indices 3 3) [1 1 0 0 0 0 1 1 1])
game-of-life.core=>
1
(dead>alive (neighbors'-indices 3 3) [1 1 0 0 0 0 0 0 0])
game-of-life.core=>
0
((fn [coll] (mapv #(do (println coll) 1))) [0 0 0 0 0 0 0 0])
Execution error (ArityException) at game-of-life.core/eval3909$fn (form-init14483702053171892480.clj:45).
Wrong number of args (1) passed to: clojure.core/mapv
((fn [coll] (mapv #(do (println coll) 1)) coll) [0 0 0 0 0 0 0 0])
Execution error (ArityException) at game-of-life.core/eval3943$fn (form-init14483702053171892480.clj:45).
Wrong number of args (1) passed to: clojure.core/mapv
((fn [coll] (mapv #(do (println coll) 1) coll)) [0 0 0 0 0 0 0 0])
Execution error (ArityException) at game-of-life.core/eval4005$fn (form-init14483702053171892480.clj:45).
Wrong number of args (1) passed to: game-of-life.core/eval4005/fn--4006/fn--4007
((fn [coll] (mapv #(do (println coll) 1) coll)) [0 0 0 0 0 0 0 0])
Execution error (ArityException) at game-of-life.core/eval4011$fn (form-init14483702053171892480.clj:45).
Wrong number of args (1) passed to: game-of-life.core/eval4011/fn--4012/fn--4013
(defn [coll] (mapv #(do (println coll) 1) coll))
Syntax error macroexpanding clojure.core/defn at (core.clj:45:1).
[coll] - failed: simple-symbol? at: [:fn-name] spec: :clojure.core.specs.alpha/defn-args
(thing [0 0 0 0 0 0 0 0 0])
Syntax error compiling at (core.clj:46:1).
Unable to resolve symbol: thing in this context
(defn thing [coll] (mapv #(do (println coll) 1) coll))
game-of-life.core=>
#'game-of-life.core/thing
(thing [0 0 0 0 0 0 0 0 0])
Execution error (ArityException) at game-of-life.core/thing (form-init14483702053171892480.clj:45).
Wrong number of args (1) passed to: game-of-life.core/thing/fn--4179
(defn thing [coll] (mapv #(do (println coll) (inc %)) coll))
game-of-life.core=>
#'game-of-life.core/thing
(thing [0 0 0 0 0 0 0 0 0])
[0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0]
[0 0 0 0 0 0 0 0 0]
game-of-life.core=>
[1 1 1 1 1 1 1 1 1]
Loading File /home/tracy/Documents/clojure_projects/game-of-life/src/game_of_life/core.clj
game-of-life.core=>
#'game-of-life.core/-main
(new-world #(neighbors'-indices 3 %) [1 1 1 1 1 1 1 1 1])
game-of-life.core=>
[1 1 1 1 1 1 1 1 1]
(new-world #(neighbors'-indices 3 %) [1 1 1 1 1 1 1 1 1])
game-of-life.core=>
[1 1 1 1 1 1 1 1 1]
(new-world #(neighbors'-indices 3 %) [1 1 1 1 0 0 0 0 0])
game-of-life.core=>
[0 0 0 0 0 0 0 0 0]
(new-world #(neighbors'-indices 3 %) [1 1 1 1 0 0 0 0 1])
game-of-life.core=>
[1 1 1 1 1 1 1 1 1]
(defn new-world [neighbors'-indices old-world indices]
  (mapv #(dead>alive (neighbors'-indices %) old-world) indices))
game-of-life.core=>
#'game-of-life.core/new-world
(new-world #(neighbors'-indices 3 %) [1 1 1 1 0 0 0 0 1] (range 9))
game-of-life.core=>
[1 1 1 1 1 1 1 1 1]
(indices-in-bounds [0 1 2 3 4 5] [-1 0 9 10])
game-of-life.core=>
(0)
(indices-in-bounds [0 1 2 3 4 5] [-1 0 1 9 10])
game-of-life.core=>
(0 1)
(new-world #(neighbors'-indices 3 %) [1 1 1 1 0 0 0 0 1] (range 9))
game-of-life.core=>
[1 1 1 1 1 1 1 1 1]
(new-world #(neighbors'-indices 3 %) [1 1 1 1 0 0 0 0 0] (range 9))
game-of-life.core=>
[0 0 0 0 0 0 0 0 0]
(new-world #(neighbors'-indices 3 %) [1 1 1 1 0 0 0 0 0
                                      0 0 0 0 0 0 0 0 0
                                      0 0 0 0 0 0 0 0 0
                                      1 1 1 1 1 1 1 1 1
                                      1 1 1 0 0 0 0 0 0
                                      1 1 1 1 0 0 0 0 0
                                      1 1 1 1 0 0 0 0 0] (range 9))
game-of-life.core=>
[0 0 0 0 0 0 0 0 0]
(new-world #(neighbors'-indices 3 %) [1 1 1 1 0 0 0 0 0
                                      0 0 0 0 0 0 0 0 0
                                      0 0 0 0 0 0 0 0 0
                                      1 1 1 1 1 1 1 1 1
                                      1 1 1 0 0 0 0 0 0
                                      1 1 1 1 0 0 0 0 0
                                      1 1 1 1 0 0 0 0 0] (range 63))
game-of-life.core=>
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
(defn dead>alive [neighbors'-indices world]
  (let [neighbors (indices-in-bounds neighbors'-indices world)]
    (do (println neighbors'-indices) (if (> (apply + neighbors)
     (/ (count neighbors) 2)) 1 0))))
game-of-life.core=>
#'game-of-life.core/dead>alive
(new-world #(neighbors'-indices 3 %) [1 1 1 1 0 0 0 0 0
                                      0 0 0 0 0 0 0 0 0
                                      0 0 0 0 0 0 0 0 0
                                      1 1 1 1 1 1 1 1 1
                                      1 1 1 0 0 0 0 0 0
                                      1 1 1 1 0 0 0 0 0
                                      1 1 1 1 0 0 0 0 0] (range 63))
[-4 -3 -2 -1 0 1 2 3 4]
[-3 -2 -1 0 1 2 3 4 5]
[-2 -1 0 1 2 3 4 5 6]
[-1 0 1 2 3 4 5 6 7]
[0 1 2 3 4 5 6 7 8]
[1 2 3 4 5 6 7 8 9]
[2 3 4 5 6 7 8 9 10]
[3 4 5 6 7 8 9 10 11]
[4 5 6 7 8 9 10 11 12]
[5 6 7 8 9 10 11 12 13]
[6 7 8 9 10 11 12 13 14]
[7 8 9 10 11 12 13 14 15]
[8 9 10 11 12 13 14 15 16]
[9 10 11 12 13 14 15 16 17]
[10 11 12 13 14 15 16 17 18]
[11 12 13 14 15 16 17 18 19]
[12 13 14 15 16 17 18 19 20]
[13 14 15 16 17 18 19 20 21]
[14 15 16 17 18 19 20 21 22]
[15 16 17 18 19 20 21 22 23]
[16 17 18 19 20 21 22 23 24]
[17 18 19 20 21 22 23 24 25]
[18 19 20 21 22 23 24 25 26]
[19 20 21 22 23 24 25 26 27]
[20 21 22 23 24 25 26 27 28]
[21 22 23 24 25 26 27 28 29]
[22 23 24 25 26 27 28 29 30]
[23 24 25 26 27 28 29 30 31]
[24 25 26 27 28 29 30 31 32]
[25 26 27 28 29 30 31 32 33]
[26 27 28 29 30 31 32 33 34]
[27 28 29 30 31 32 33 34 35]
[28 29 30 31 32 33 34 35 36]
[29 30 31 32 33 34 35 36 37]
[30 31 32 33 34 35 36 37 38]
[31 32 33 34 35 36 37 38 39]
[32 33 34 35 36 37 38 39 40]
[33 34 35 36 37 38 39 40 41]
[34 35 36 37 38 39 40 41 42]
[35 36 37 38 39 40 41 42 43]
[36 37 38 39 40 41 42 43 44]
[37 38 39 40 41 42 43 44 45]
[38 39 40 41 42 43 44 45 46]
[39 40 41 42 43 44 45 46 47]
[40 41 42 43 44 45 46 47 48]
[41 42 43 44 45 46 47 48 49]
[42 43 44 45 46 47 48 49 50]
[43 44 45 46 47 48 49 50 51]
[44 45 46 47 48 49 50 51 52]
[45 46 47 48 49 50 51 52 53]
[46 47 48 49 50 51 52 53 54]
[47 48 49 50 51 52 53 54 55]
[48 49 50 51 52 53 54 55 56]
[49 50 51 52 53 54 55 56 57]
[50 51 52 53 54 55 56 57 58]
[51 52 53 54 55 56 57 58 59]
[52 53 54 55 56 57 58 59 60]
[53 54 55 56 57 58 59 60 61]
[54 55 56 57 58 59 60 61 62]
[55 56 57 58 59 60 61 62 63]
[56 57 58 59 60 61 62 63 64]
[57 58 59 60 61 62 63 64 65]
[58 59 60 61 62 63 64 65 66]
game-of-life.core=>
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
(defn dead>alive [neighbors'-indices world]
  (let [neighbors (indices-in-bounds neighbors'-indices world)]
    (do (println neighbors) (if (> (apply + neighbors)
     (/ (count neighbors) 2)) 1 0))))
game-of-life.core=>
#'game-of-life.core/dead>alive
(new-world #(neighbors'-indices 3 %) [1 1 1 1 0 0 0 0 0
                                      0 0 0 0 0 0 0 0 0
                                      0 0 0 0 0 0 0 0 0
                                      1 1 1 1 1 1 1 1 1
                                      1 1 1 0 0 0 0 0 0
                                      1 1 1 1 0 0 0 0 0
                                      1 1 1 1 0 0 0 0 0] (range 63))
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0)
game-of-life.core=>
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
(defn dead>alive [neighbors'-indices world]
  (let [neighbors (indices-in-bounds world neighbors'-indices)]
    (do (println neighbors) (if (> (apply + neighbors)
     (/ (count neighbors) 2)) 1 0))))
game-of-life.core=>
#'game-of-life.core/dead>alive
(dead>alive (neighbors'-indices 3 7) [0 0 0 0 0 0 1 1 1])
(3 4 5 6 7 8)
game-of-life.core=>
1
(new-world #(neighbors'-indices 3 %) [1 1 1 1 0 0 0 0 0
                                      0 0 0 0 0 0 0 0 0
                                      0 0 0 0 0 0 0 0 0
                                      1 1 1 1 1 1 1 1 1
                                      1 1 1 0 0 0 0 0 0
                                      1 1 1 1 0 0 0 0 0
                                      1 1 1 1 0 0 0 0 0] (range 63))
(0 1 2 3 4)
(0 1 2 3 4 5)
(0 1 2 3 4 5 6)
(0 1 2 3 4 5 6 7)
(0 1 2 3 4 5 6 7 8)
(1 2 3 4 5 6 7 8 9)
(2 3 4 5 6 7 8 9 10)
(3 4 5 6 7 8 9 10 11)
(4 5 6 7 8 9 10 11 12)
(5 6 7 8 9 10 11 12 13)
(6 7 8 9 10 11 12 13 14)
(7 8 9 10 11 12 13 14 15)
(8 9 10 11 12 13 14 15 16)
(9 10 11 12 13 14 15 16 17)
(10 11 12 13 14 15 16 17 18)
(11 12 13 14 15 16 17 18 19)
(12 13 14 15 16 17 18 19 20)
(13 14 15 16 17 18 19 20 21)
(14 15 16 17 18 19 20 21 22)
(15 16 17 18 19 20 21 22 23)
(16 17 18 19 20 21 22 23 24)
(17 18 19 20 21 22 23 24 25)
(18 19 20 21 22 23 24 25 26)
(19 20 21 22 23 24 25 26 27)
(20 21 22 23 24 25 26 27 28)
(21 22 23 24 25 26 27 28 29)
(22 23 24 25 26 27 28 29 30)
(23 24 25 26 27 28 29 30 31)
(24 25 26 27 28 29 30 31 32)
(25 26 27 28 29 30 31 32 33)
(26 27 28 29 30 31 32 33 34)
(27 28 29 30 31 32 33 34 35)
(28 29 30 31 32 33 34 35 36)
(29 30 31 32 33 34 35 36 37)
(30 31 32 33 34 35 36 37 38)
(31 32 33 34 35 36 37 38 39)
(32 33 34 35 36 37 38 39 40)
(33 34 35 36 37 38 39 40 41)
(34 35 36 37 38 39 40 41 42)
(35 36 37 38 39 40 41 42 43)
(36 37 38 39 40 41 42 43 44)
(37 38 39 40 41 42 43 44 45)
(38 39 40 41 42 43 44 45 46)
(39 40 41 42 43 44 45 46 47)
(40 41 42 43 44 45 46 47 48)
(41 42 43 44 45 46 47 48 49)
(42 43 44 45 46 47 48 49 50)
(43 44 45 46 47 48 49 50 51)
(44 45 46 47 48 49 50 51 52)
(45 46 47 48 49 50 51 52 53)
(46 47 48 49 50 51 52 53 54)
(47 48 49 50 51 52 53 54 55)
(48 49 50 51 52 53 54 55 56)
(49 50 51 52 53 54 55 56 57)
(50 51 52 53 54 55 56 57 58)
(51 52 53 54 55 56 57 58 59)
(52 53 54 55 56 57 58 59 60)
(53 54 55 56 57 58 59 60 61)
(54 55 56 57 58 59 60 61 62)
(55 56 57 58 59 60 61 62)
(56 57 58 59 60 61 62)
(57 58 59 60 61 62)
(58 59 60 61 62)
game-of-life.core=>
[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
(new-world #(neighbors'-indices 7 %) [1 1 1 1 0 0 0 0 0
                                      0 0 0 0 0 0 0 0 0
                                      0 0 0 0 0 0 0 0 0
                                      1 1 1 1 1 1 1 1 1
                                      1 1 1 0 0 0 0 0 0
                                      1 1 1 1 0 0 0 0 0
                                      1 1 1 1 0 0 0 0 0] (range 63))
(0 1 6 7 8)
(0 1 2 7 8 9)
(1 2 3 8 9 10)
(2 3 4 9 10 11)
(3 4 5 10 11 12)
(4 5 6 11 12 13)
(0 5 6 7 12 13 14)
(0 1 6 7 8 13 14 15)
(0 1 2 7 8 9 14 15 16)
(1 2 3 8 9 10 15 16 17)
(2 3 4 9 10 11 16 17 18)
(3 4 5 10 11 12 17 18 19)
(4 5 6 11 12 13 18 19 20)
(5 6 7 12 13 14 19 20 21)
(6 7 8 13 14 15 20 21 22)
(7 8 9 14 15 16 21 22 23)
(8 9 10 15 16 17 22 23 24)
(9 10 11 16 17 18 23 24 25)
(10 11 12 17 18 19 24 25 26)
(11 12 13 18 19 20 25 26 27)
(12 13 14 19 20 21 26 27 28)
(13 14 15 20 21 22 27 28 29)
(14 15 16 21 22 23 28 29 30)
(15 16 17 22 23 24 29 30 31)
(16 17 18 23 24 25 30 31 32)
(17 18 19 24 25 26 31 32 33)
(18 19 20 25 26 27 32 33 34)
(19 20 21 26 27 28 33 34 35)
(20 21 22 27 28 29 34 35 36)
(21 22 23 28 29 30 35 36 37)
(22 23 24 29 30 31 36 37 38)
(23 24 25 30 31 32 37 38 39)
(24 25 26 31 32 33 38 39 40)
(25 26 27 32 33 34 39 40 41)
(26 27 28 33 34 35 40 41 42)
(27 28 29 34 35 36 41 42 43)
(28 29 30 35 36 37 42 43 44)
(29 30 31 36 37 38 43 44 45)
(30 31 32 37 38 39 44 45 46)
(31 32 33 38 39 40 45 46 47)
(32 33 34 39 40 41 46 47 48)
(33 34 35 40 41 42 47 48 49)
(34 35 36 41 42 43 48 49 50)
(35 36 37 42 43 44 49 50 51)
(36 37 38 43 44 45 50 51 52)
(37 38 39 44 45 46 51 52 53)
(38 39 40 45 46 47 52 53 54)
(39 40 41 46 47 48 53 54 55)
(40 41 42 47 48 49 54 55 56)
(41 42 43 48 49 50 55 56 57)
(42 43 44 49 50 51 56 57 58)
(43 44 45 50 51 52 57 58 59)
(44 45 46 51 52 53 58 59 60)
(45 46 47 52 53 54 59 60 61)
(46 47 48 53 54 55 60 61 62)
(47 48 49 54 55 56 61 62)
(48 49 50 55 56 57 62)
(49 50 51 56 57 58)
(50 51 52 57 58 59)
(51 52 53 58 59 60)
(52 53 54 59 60 61)
(53 54 55 60 61 62)
(54 55 56 61 62)
game-of-life.core=>
[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
(new-world #(neighbors'-indices 9 %) [1 1 1 1 0 0 0 0 0
                                      0 0 0 0 0 0 0 0 0
                                      0 0 0 0 0 0 0 0 0
                                      1 1 1 1 1 1 1 1 1
                                      1 1 1 0 0 0 0 0 0
                                      1 1 1 1 0 0 0 0 0
                                      1 1 1 1 0 0 0 0 0] (range 63))
(0 1 8 9 10)
(0 1 2 9 10 11)
(1 2 3 10 11 12)
(2 3 4 11 12 13)
(3 4 5 12 13 14)
(4 5 6 13 14 15)
(5 6 7 14 15 16)
(6 7 8 15 16 17)
(0 7 8 9 16 17 18)
(0 1 8 9 10 17 18 19)
(0 1 2 9 10 11 18 19 20)
(1 2 3 10 11 12 19 20 21)
(2 3 4 11 12 13 20 21 22)
(3 4 5 12 13 14 21 22 23)
(4 5 6 13 14 15 22 23 24)
(5 6 7 14 15 16 23 24 25)
(6 7 8 15 16 17 24 25 26)
(7 8 9 16 17 18 25 26 27)
(8 9 10 17 18 19 26 27 28)
(9 10 11 18 19 20 27 28 29)
(10 11 12 19 20 21 28 29 30)
(11 12 13 20 21 22 29 30 31)
(12 13 14 21 22 23 30 31 32)
(13 14 15 22 23 24 31 32 33)
(14 15 16 23 24 25 32 33 34)
(15 16 17 24 25 26 33 34 35)
(16 17 18 25 26 27 34 35 36)
(17 18 19 26 27 28 35 36 37)
(18 19 20 27 28 29 36 37 38)
(19 20 21 28 29 30 37 38 39)
(20 21 22 29 30 31 38 39 40)
(21 22 23 30 31 32 39 40 41)
(22 23 24 31 32 33 40 41 42)
(23 24 25 32 33 34 41 42 43)
(24 25 26 33 34 35 42 43 44)
(25 26 27 34 35 36 43 44 45)
(26 27 28 35 36 37 44 45 46)
(27 28 29 36 37 38 45 46 47)
(28 29 30 37 38 39 46 47 48)
(29 30 31 38 39 40 47 48 49)
(30 31 32 39 40 41 48 49 50)
(31 32 33 40 41 42 49 50 51)
(32 33 34 41 42 43 50 51 52)
(33 34 35 42 43 44 51 52 53)
(34 35 36 43 44 45 52 53 54)
(35 36 37 44 45 46 53 54 55)
(36 37 38 45 46 47 54 55 56)
(37 38 39 46 47 48 55 56 57)
(38 39 40 47 48 49 56 57 58)
(39 40 41 48 49 50 57 58 59)
(40 41 42 49 50 51 58 59 60)
(41 42 43 50 51 52 59 60 61)
(42 43 44 51 52 53 60 61 62)
(43 44 45 52 53 54 61 62)
(44 45 46 53 54 55 62)
(45 46 47 54 55 56)
(46 47 48 55 56 57)
(47 48 49 56 57 58)
(48 49 50 57 58 59)
(49 50 51 58 59 60)
(50 51 52 59 60 61)
(51 52 53 60 61 62)
(52 53 54 61 62)
game-of-life.core=>
[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
(dead>alive (neighbors'-indices 3 3) [1 1 0 0 0 0 0 0 0])
(0 1 2 3 4 5 6 7)
game-of-life.core=>
1
(dead>alive (neighbors'-indices 3 5) [1 1 0 0 0 0 0 0 0])
(1 2 3 4 5 6 7 8)
game-of-life.core=>
1
(neighbors'-indices 3 5)
game-of-life.core=>
[1 2 3 4 5 6 7 8 9]
(defn dead>alive [neighbors'-indices world]
  (let [neighbors (mapv world (indices-in-bounds world neighbors'-indices))]
    (do (println neighbors) (if (> (apply + neighbors)
     (/ (count neighbors) 2)) 1 0))))
game-of-life.core=>
#'game-of-life.core/dead>alive
(dead>alive (neighbors'-indices 3 7) [0 0 0 0 0 0 1 1 1])
[0 0 0 1 1 1]
game-of-life.core=>
0
(dead>alive (neighbors'-indices 3 5) [1 1 0 0 0 0 0 0 0])
[1 0 0 0 0 0 0 0]
game-of-life.core=>
0
(dead>alive (neighbors'-indices 3 7) [0 0 0 0 1 1 1 1 1])
[0 1 1 1 1 1]
game-of-life.core=>
1
(defn dead>alive [neighbors'-indices world]
  (let [neighbors (mapv world (indices-in-bounds world neighbors'-indices))]
    (if (> (apply + neighbors)
     (/ (count neighbors) 2)) 1 0)))
game-of-life.core=>
#'game-of-life.core/dead>alive
Loading File /home/tracy/Documents/clojure_projects/game-of-life/src/game_of_life/core.clj
game-of-life.core=>
#'game-of-life.core/-main
(defn dead>alive [neighbors'-indices world]
  (let [neighbors (mapv world (indices-in-bounds world neighbors'-indices))]
    (do (println neighbors) (if (> (apply + neighbors)
     (/ (count neighbors) 2)) 1 0))))
game-of-life.core=>
#'game-of-life.core/dead>alive
(dead>alive (neighbors'-indices 3 7) [0 0 0 0 1 1 1 1 1])
[0 1 1 1 1 1]
game-of-life.core=>
1
(dead>alive (neighbors'-indices 3 5) [1 1 0 0 0 0 0 0 0])
[1 0 0 0 0 0 0 0]
game-of-life.core=>
0
(defn dead>alive [neighbors'-indices world]
  (let [neighbors (mapv world (indices-in-bounds world neighbors'-indices))]
    (if (> (apply + neighbors)
     (/ (count neighbors) 2)) 1 0)))
game-of-life.core=>
#'game-of-life.core/dead>alive
(new-world #(neighbors'-indices 9 %) [1 1 1 1 0 0 0 0 0
                                      0 0 0 0 0 0 0 0 0
                                      0 0 0 0 0 0 0 0 0
                                      1 1 1 1 1 1 1 1 1
                                      1 1 1 0 0 0 0 0 0
                                      1 1 1 1 0 0 0 0 0
                                      1 1 1 1 0 0 0 0 0] (range 63))
game-of-life.core=>
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 1 1 0 0 0 0 1 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0]
(new-world #(neighbors'-indices 9 %) [1 1 1 1 0 0 0 0 0
                                      1 0 1 0 0 0 0 0 0
                                      0 0 0 0 0 0 0 0 0
                                      1 1 1 1 1 1 1 1 1
                                      1 1 1 0 0 0 0 0 0
                                      1 1 1 1 0 1 0 0 0
                                      1 1 1 1 0 0 0 1 0] (range 63))
game-of-life.core=>
[1 1 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 1 1 1 0 0 0 1 1 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0]
(print-grid (new-world #(neighbors'-indices 9 %) [1 1 1 1 0 0 0 0 0
                                      1 0 1 0 0 0 0 0 0
                                      0 0 0 0 0 0 0 0 0
                                      1 1 1 1 1 1 1 1 1
                                      1 1 1 0 0 0 0 0 0
                                      1 1 1 1 0 1 0 0 0
                                      1 1 1 1 0 0 0 1 0] (range 63)) 9)
(1 1 1 0 0 0 0 0 0)
(0 1 0 0 0 0 0 0 0)
(0 1 0 0 0 0 0 0 0)
(1 1 1 0 0 0 0 0 1)
(1 1 1 1 1 0 0 0 1)
(1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0)
game-of-life.core=>
nil
(print-grid (new-world #(neighbors'-indices 9 %)
  (random-world 63) (range 63)) 9)
(0 0 0 0 0 0 0 0 0)
(0 0 0 0 0 0 0 0 0)
(0 0 0 0 0 0 0 0 0)
(0 0 0 0 0 0 0 0 0)
(0 0 0 0 0 0 0 0 0)
(0 0 0 0 0 0 0 0 0)
(0 0 0 0 0 0 0 0 0)
game-of-life.core=>
nil
(random-world 63)
game-of-life.core=>
(0 1 1 1 0 0 0 0 0 0 0 1 1 1 0 0 1 1 0 1 1 1 1 0 0 0 0 0 0 1 0 1 1 0 0 0 0 0 1 0 1 1 0 0 1 1 0 0 1 1 0 1 1 1 1 0 0 0 1 1 1 0 1)
(print-grid (new-world #(neighbors'-indices 9 %)
  (random-world 63) (range 63)) 9)
(0 0 0 0 0 0 0 0 0)
(0 0 0 0 0 0 0 0 0)
(0 0 0 0 0 0 0 0 0)
(0 0 0 0 0 0 0 0 0)
(0 0 0 0 0 0 0 0 0)
(0 0 0 0 0 0 0 0 0)
(0 0 0 0 0 0 0 0 0)
game-of-life.core=>
nil
(print-grid (new-world #(neighbors'-indices 9 %)
                                     [1 1 1 1 0 0 0 0 0
                                      1 0 1 0 0 0 0 0 0
                                      0 0 0 0 0 0 0 0 0
                                      1 1 1 1 1 1 1 1 1
                                      1 1 1 0 0 0 0 0 0
                                      1 1 1 1 0 1 0 0 0
                                      1 1 1 1 0 0 0 1 0] (range 63)) 9)
(1 1 1 0 0 0 0 0 0)
(0 1 0 0 0 0 0 0 0)
(0 1 0 0 0 0 0 0 0)
(1 1 1 0 0 0 0 0 1)
(1 1 1 1 1 0 0 0 1)
(1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0)
game-of-life.core=>
nil
(print-grid (new-world #(neighbors'-indices 9 %)
                                     '(1 1 1 1 0 0 0 0 0
                                      1 0 1 0 0 0 0 0 0
                                      0 0 0 0 0 0 0 0 0
                                      1 1 1 1 1 1 1 1 1
                                      1 1 1 0 0 0 0 0 0
                                      1 1 1 1 0 1 0 0 0
                                      1 1 1 1 0 0 0 1 0) (range 63)) 9)
(0 0 0 0 0 0 0 0 0)
(0 0 0 0 0 0 0 0 0)
(0 0 0 0 0 0 0 0 0)
(0 0 0 0 0 0 0 0 0)
(0 0 0 0 0 0 0 0 0)
(0 0 0 0 0 0 0 0 0)
(0 0 0 0 0 0 0 0 0)
game-of-life.core=>
nil
(defn new-world [neighbors'-indices old-world indices]
  (map #(dead>alive (neighbors'-indices %) old-world) indices))
game-of-life.core=>
#'game-of-life.core/new-world
(print-grid (new-world #(neighbors'-indices 9 %)
                                     '(1 1 1 1 0 0 0 0 0
                                      1 0 1 0 0 0 0 0 0
                                      0 0 0 0 0 0 0 0 0
                                      1 1 1 1 1 1 1 1 1
                                      1 1 1 0 0 0 0 0 0
                                      1 1 1 1 0 1 0 0 0
                                      1 1 1 1 0 0 0 1 0) (range 63)) 9)
(0 0 0 0 0 0 0 0 0)
(0 0 0 0 0 0 0 0 0)
(0 0 0 0 0 0 0 0 0)
(0 0 0 0 0 0 0 0 0)
(0 0 0 0 0 0 0 0 0)
(0 0 0 0 0 0 0 0 0)
(0 0 0 0 0 0 0 0 0)
game-of-life.core=>
nil
(print-grid (new-world #(neighbors'-indices 9 %)
                                     [1 1 1 1 0 0 0 0 0
                                      1 0 1 0 0 0 0 0 0
                                      0 0 0 0 0 0 0 0 0
                                      1 1 1 1 1 1 1 1 1
                                      1 1 1 0 0 0 0 0 0
                                      1 1 1 1 0 1 0 0 0
                                      1 1 1 1 0 0 0 1 0] (range 63)) 9)
(1 1 1 0 0 0 0 0 0)
(0 1 0 0 0 0 0 0 0)
(0 1 0 0 0 0 0 0 0)
(1 1 1 0 0 0 0 0 1)
(1 1 1 1 1 0 0 0 1)
(1 1 1 1 0 0 0 0 0)
(1 1 1 1 0 0 0 0 0)
game-of-life.core=>
nil
(print-grid (new-world #(neighbors'-indices 9 %)
  (random-world 63) (range 63)) 9)
(0 0 0 0 0 0 0 0 0)
(0 0 0 0 0 0 0 0 0)
(0 0 0 0 0 0 0 0 0)
(0 0 0 0 0 0 0 0 0)
(0 0 0 0 0 0 0 0 0)
(0 0 0 0 0 0 0 0 0)
(0 0 0 0 0 0 0 0 0)
game-of-life.core=>
nil
(defn random-world [size]
  (into (take size (repeatedly #(rand-int 2)))))
game-of-life.core=>
#'game-of-life.core/random-world
(print-grid (new-world #(neighbors'-indices 9 %)
  (random-world 63) (range 63)) 9)
(0 0 0 0 0 0 0 0 0)
(0 0 0 0 0 0 0 0 0)
(0 0 0 0 0 0 0 0 0)
(0 0 0 0 0 0 0 0 0)
(0 0 0 0 0 0 0 0 0)
(0 0 0 0 0 0 0 0 0)
(0 0 0 0 0 0 0 0 0)
game-of-life.core=>
nil
(defn random-world [size]
  (into [] (take size (repeatedly #(rand-int 2)))))
game-of-life.core=>
#'game-of-life.core/random-world
(random-world 9)
game-of-life.core=>
[0 0 1 0 1 0 0 0 1]
(print-grid (new-world #(neighbors'-indices 9 %)
  (random-world 63) (range 63)) 9)
(1 0 1 1 0 0 0 0 1)
(1 1 1 0 0 0 0 0 1)
(1 1 1 0 0 1 1 1 1)
(1 1 0 0 0 1 1 1 1)
(1 1 0 0 0 0 0 0 1)
(1 1 1 1 1 0 0 0 0)
(0 0 0 0 1 0 0 0 0)
game-of-life.core=>
nil
(new-world #(neighbors'-indices 9 %)
  (random-world 63) (range 63))
game-of-life.core=>
(1 1 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 1 1 1 0 0 1 0 1 1 1 1 0 0 0 1 1 1 1 0 0 0 1 1 1 1 1 1 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 1 0 0 0)
(defn new-world [neighbors'-indices old-world indices]
  (mapv #(dead>alive (neighbors'-indices %) old-world) indices))
game-of-life.core=>
#'game-of-life.core/new-world
(new-world #(neighbors'-indices 9 %)
  (random-world 63) (range 63))
game-of-life.core=>
[0 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 0 0 0 0 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 0 1 0 1 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 1]
--------------------
